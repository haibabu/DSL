/*
* generated by Xtext
*/
package org.babu.xtext.training.smallfunc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmallFuncDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NameSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cSmallFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSmallFuncSmallFuncParserRuleCall_3_0 = (RuleCall)cSmallFuncAssignment_3.eContents().get(0);
		
		//NameSpace:
		//	"namespace" name=QName imports+=Import* smallFunc=SmallFunc;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QName imports+=Import* smallFunc=SmallFunc
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QName
		public RuleCall getNameQNameParserRuleCall_1_0() { return cNameQNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//smallFunc=SmallFunc
		public Assignment getSmallFuncAssignment_3() { return cSmallFuncAssignment_3; }

		//SmallFunc
		public RuleCall getSmallFuncSmallFuncParserRuleCall_3_0() { return cSmallFuncSmallFuncParserRuleCall_3_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QNameWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QNameWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QNameWildCard:
		//	QName "*"?;
		public ParserRule getRule() { return rule; }

		//QName "*"?
		public Group getGroup() { return cGroup; }

		//QName
		public RuleCall getQNameParserRuleCall_0() { return cQNameParserRuleCall_0; }

		//"*"?
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQNameWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QNameWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QNameWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QNameWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QNameWildCard
		public RuleCall getImportedNamespaceQNameWildCardParserRuleCall_1_0() { return cImportedNamespaceQNameWildCardParserRuleCall_1_0; }
	}

	public class SmallFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SmallFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SmallFunc:
		//	"def" name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "}";
		public ParserRule getRule() { return rule; }

		//"def" name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "}"
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Param ("," params+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Param
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_3_0_0() { return cParamsParamParserRuleCall_3_0_0; }

		//("," params+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_1_0() { return cParamsParamParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataTypeDataTypeParserRuleCall_0_0 = (RuleCall)cDataTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Param:
		//	dataType=DataType name=ID;
		public ParserRule getRule() { return rule; }

		//dataType=DataType name=ID
		public Group getGroup() { return cGroup; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_0() { return cDataTypeAssignment_0; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_0_0() { return cDataTypeDataTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatatypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatatypeDataTypeParserRuleCall_0_0 = (RuleCall)cDatatypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cArrayAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Attribute:
		//	datatype=DataType array?="[]"? name=ID;
		public ParserRule getRule() { return rule; }

		//datatype=DataType array?="[]"? name=ID
		public Group getGroup() { return cGroup; }

		//datatype=DataType
		public Assignment getDatatypeAssignment_0() { return cDatatypeAssignment_0; }

		//DataType
		public RuleCall getDatatypeDataTypeParserRuleCall_0_0() { return cDatatypeDataTypeParserRuleCall_0_0; }

		//array?="[]"?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSmallClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataType:
		//	{DataType} simpleType | //Datatype is called ations
		//	smallClassType;
		public ParserRule getRule() { return rule; }

		//{DataType} simpleType | //Datatype is called ations
		//smallClassType
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataType} simpleType
		public Group getGroup_0() { return cGroup_0; }

		//{DataType}
		public Action getDataTypeAction_0_0() { return cDataTypeAction_0_0; }

		//simpleType
		public RuleCall getSimpleTypeParserRuleCall_0_1() { return cSimpleTypeParserRuleCall_0_1; }

		////Datatype is called ations
		//smallClassType
		public RuleCall getSmallClassTypeParserRuleCall_1() { return cSmallClassTypeParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//simpleType:
		//	"String" | "boolean" | "int" | "float";
		public ParserRule getRule() { return rule; }

		//"String" | "boolean" | "int" | "float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"float"
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }
	}

	public class SmallClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "smallClassType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeSmallClassCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeSmallClassIDTerminalRuleCall_0_1 = (RuleCall)cTypeSmallClassCrossReference_0.eContents().get(1);
		
		//smallClassType:
		//	type=[smalljava::SmallClass];
		public ParserRule getRule() { return rule; }

		//type=[smalljava::SmallClass]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[smalljava::SmallClass]
		public CrossReference getTypeSmallClassCrossReference_0() { return cTypeSmallClassCrossReference_0; }

		//ID
		public RuleCall getTypeSmallClassIDTerminalRuleCall_0_1() { return cTypeSmallClassIDTerminalRuleCall_0_1; }
	}
	
	
	private final NameSpaceElements pNameSpace;
	private final QNameElements pQName;
	private final QNameWildCardElements pQNameWildCard;
	private final ImportElements pImport;
	private final SmallFuncElements pSmallFunc;
	private final ParamElements pParam;
	private final AttributeElements pAttribute;
	private final DataTypeElements pDataType;
	private final SimpleTypeElements pSimpleType;
	private final SmallClassTypeElements pSmallClassType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallFuncDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNameSpace = new NameSpaceElements();
		this.pQName = new QNameElements();
		this.pQNameWildCard = new QNameWildCardElements();
		this.pImport = new ImportElements();
		this.pSmallFunc = new SmallFuncElements();
		this.pParam = new ParamElements();
		this.pAttribute = new AttributeElements();
		this.pDataType = new DataTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pSmallClassType = new SmallClassTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.babu.xtext.training.smallfunc.SmallFuncDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NameSpace:
	//	"namespace" name=QName imports+=Import* smallFunc=SmallFunc;
	public NameSpaceElements getNameSpaceAccess() {
		return pNameSpace;
	}
	
	public ParserRule getNameSpaceRule() {
		return getNameSpaceAccess().getRule();
	}

	//QName:
	//	ID ("." ID)*;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//QNameWildCard:
	//	QName "*"?;
	public QNameWildCardElements getQNameWildCardAccess() {
		return pQNameWildCard;
	}
	
	public ParserRule getQNameWildCardRule() {
		return getQNameWildCardAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QNameWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//SmallFunc:
	//	"def" name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "}";
	public SmallFuncElements getSmallFuncAccess() {
		return pSmallFunc;
	}
	
	public ParserRule getSmallFuncRule() {
		return getSmallFuncAccess().getRule();
	}

	//Param:
	//	dataType=DataType name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Attribute:
	//	datatype=DataType array?="[]"? name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//DataType:
	//	{DataType} simpleType | //Datatype is called ations
	//	smallClassType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//simpleType:
	//	"String" | "boolean" | "int" | "float";
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//smallClassType:
	//	type=[smalljava::SmallClass];
	public SmallClassTypeElements getSmallClassTypeAccess() {
		return pSmallClassType;
	}
	
	public ParserRule getSmallClassTypeRule() {
		return getSmallClassTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
