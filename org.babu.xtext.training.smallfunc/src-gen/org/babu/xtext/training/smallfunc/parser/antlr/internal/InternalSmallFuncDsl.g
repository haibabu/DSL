/*
* generated by Xtext
*/
grammar InternalSmallFuncDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.babu.xtext.training.smallfunc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.babu.xtext.training.smallfunc.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.babu.xtext.training.smallfunc.services.SmallFuncDslGrammarAccess;

}

@parser::members {

 	private SmallFuncDslGrammarAccess grammarAccess;
 	
    public InternalSmallFuncDslParser(TokenStream input, SmallFuncDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "NameSpace";	
   	}
   	
   	@Override
   	protected SmallFuncDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNameSpace
entryRuleNameSpace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameSpaceRule()); }
	 iv_ruleNameSpace=ruleNameSpace 
	 { $current=$iv_ruleNameSpace.current; } 
	 EOF 
;

// Rule NameSpace
ruleNameSpace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNameSpaceAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNameSpaceAccess().getNameQNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameSpaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameSpaceAccess().getImportsImportParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameSpaceRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getNameSpaceAccess().getSmallFuncSmallFuncParserRuleCall_3_0()); 
	    }
		lv_smallFunc_3_0=ruleSmallFunc		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameSpaceRule());
	        }
       		set(
       			$current, 
       			"smallFunc",
        		lv_smallFunc_3_0, 
        		"SmallFunc");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQName
entryRuleQName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQNameRule()); } 
	 iv_ruleQName=ruleQName 
	 { $current=$iv_ruleQName.current.getText(); }  
	 EOF 
;

// Rule QName
ruleQName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQNameWildCard
entryRuleQNameWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQNameWildCardRule()); } 
	 iv_ruleQNameWildCard=ruleQNameWildCard 
	 { $current=$iv_ruleQNameWildCard.current.getText(); }  
	 EOF 
;

// Rule QNameWildCard
ruleQNameWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQNameWildCardAccess().getQNameParserRuleCall_0()); 
    }
    this_QName_0=ruleQName    {
		$current.merge(this_QName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQNameWildCardAccess().getAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQNameWildCardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQNameWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QNameWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSmallFunc
entryRuleSmallFunc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmallFuncRule()); }
	 iv_ruleSmallFunc=ruleSmallFunc 
	 { $current=$iv_ruleSmallFunc.current; } 
	 EOF 
;

// Rule SmallFunc
ruleSmallFunc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='def' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSmallFuncAccess().getDefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSmallFuncAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSmallFuncRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSmallFuncAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSmallFuncAccess().getParamsParamParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmallFuncRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSmallFuncAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSmallFuncAccess().getParamsParamParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSmallFuncRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSmallFuncAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSmallFuncAccess().getLeftCurlyBracketKeyword_5());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSmallFuncAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getDataTypeDataTypeParserRuleCall_0_0()); 
	    }
		lv_dataType_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_0_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataTypeAccess().getDataTypeAction_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getSimpleTypeParserRuleCall_0_1()); 
    }
rulesimpleType
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getSmallClassTypeParserRuleCall_1()); 
    }
    this_smallClassType_2=rulesmallClassType
    { 
        $current = $this_smallClassType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesimpleType
entryRulesimpleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); } 
	 iv_rulesimpleType=rulesimpleType 
	 { $current=$iv_rulesimpleType.current.getText(); }  
	 EOF 
;

// Rule simpleType
rulesimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getStringKeyword_0()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBooleanKeyword_1()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getIntKeyword_2()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getFloatKeyword_3()); 
    }
)
    ;





// Entry rule entryRulesmallClassType
entryRulesmallClassType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmallClassTypeRule()); }
	 iv_rulesmallClassType=rulesmallClassType 
	 { $current=$iv_rulesmallClassType.current; } 
	 EOF 
;

// Rule smallClassType
rulesmallClassType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSmallClassTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSmallClassTypeAccess().getTypeSmallClassCrossReference_0()); 
	}

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


